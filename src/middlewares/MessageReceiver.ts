/* * @Author: Bigpawn * @Date: 2018/7/26 14:35 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/26 14:35 */import {IMessage} from "./MessageMiddleWare";import {Line} from "../plugins";import {DisplayType} from "../plugins/tool/suspension/enum/displayType";import {EBoardEngine} from "../EBoardEngine";class MessageReceiver {    private static stroke:any=[];    private static buffer:any=[];    private static messageId:number=0;    private static isOutput:boolean=true;    /**     * 接收到的消息     * @param {IMessage} message     */    public static receiver(message:IMessage) {        if(this.isOutput) {            this.buffer.length>0?this.stroke.concat(this.buffer):null;            this.stroke.push(message as IMessage);            this.update();        }else {            if(message.messageId === this.messageId+1) {                this.messageId = message.messageId;                this.distribute(message as IMessage);                this.isOutput = true;            }else {                this.buffer.push(message as IMessage);            }        }        return this;    }    /**     * 消息处理     */    private static update() {        if(this.stroke.length>0&&this.isOutput) {            this.stroke.sort((item1:IMessage,item2:IMessage)=>{                return (item1.messageId||0) - (item2.messageId||0)            });            let i = 0,stop=false;            while (i < this.stroke.length&&!stop) {                let message:IMessage = this.stroke.shift();                if(message.messageId === this.messageId+1) {                    this.messageId = message.messageId;                    this.distribute(message);                }else {                    this.isOutput = false;                    stop = true;                    setTimeout(()=>{                        this.messageId = message.messageId||this.messageId - 1;                        this.stroke.unshift(message);                        this.isOutput = true;                    },1500);                }            }        }    }    private static distribute(message:IMessage) {        let {type} = message;        if(type.indexOf(DisplayType.Line)>=0) {            // Line.onMessage(message as any);        }else if (type.indexOf(DisplayType.Arrow)) {        }        console.log(message,'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');    }}export {MessageReceiver}