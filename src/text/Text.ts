/* * @Author: Bigpawn * @Date: 2018/7/11 13:36 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/11 13:36 */import {fabric} from "fabric";import {AbsPlugin} from "../AbsPlugin";import {EBoardCanvas} from "../EBoardCanvas";import {EBoardEngine} from "../EBoardEngine";const {Color} = fabric;class Text extends AbsPlugin{    private enable?:boolean=false;    private color?:string;    private start?:{ x: number; y: number; };    private text?:any;    private fontSize?:number;    constructor(canvas:EBoardCanvas,eBoardEngine:EBoardEngine) {        super(canvas,eBoardEngine);        this.downHandler.bind(this);        this.upHandler.bind(this);    }    private downHandler=(o:any)=>{        this.start = this.eBoardCanvas.getPointer(o.e);        this.text = new fabric.IText('asdfasfsa',{            // isEditing: true,            left:this.start.x,            top:this.start.y,            fontSize:100,            editingBorderColor:new Color('red').toRgba(),        });        this.eBoardCanvas.add(this.text);    };    private upHandler=(o:any)=>{        if(this.text) {            this.eBoardCanvas.off('mouse:down',this.downHandler);        }    };    public setColor=(color:string)=>{        const colorObj = new Color(color);        this.color = colorObj.toRgba();    };    public setFontSize=(size:number)=>{        this.fontSize = size||20;    };    public setEnable(enable:boolean){        if(this.enable===enable){            return;        }        this.enable = enable;        const activePlugin = this.eBoardEngine.getActivePlugin();        if(enable) {            if(activePlugin) {                activePlugin.setEnable(false);            }            this.eBoardEngine.setActivePlugin(this);            this.eBoardCanvas.defaultCursor = 'text';            this.eBoardCanvas.on('mouse:down',this.downHandler);            this.eBoardCanvas.on('mouse:up',this.upHandler);        }else {            if(activePlugin && activePlugin instanceof Text) {                this.eBoardEngine.setActivePlugin(undefined);            }            this.eBoardCanvas.off('mouse:down',this.downHandler);            this.eBoardCanvas.off('mouse:up',this.upHandler);        }        return this;    }}export {Text};