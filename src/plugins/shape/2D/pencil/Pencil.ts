/* * @Author: Bigpawn * @Date: 2018/7/12 10:45 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/12 10:45 * path 最后一个L改成Q ，然后拼接最后一个点生成的path * // 相同点只添加一次  大于两个点才能调用convertPointsToSVGPath */import {fabric} from "fabric";import {AbstractShapePlugin} from '../../AbstractShapePlugin';import {IEvent} from '~fabric/fabric-impl';import {Pencil as FabricPencil} from "../../../../extends/Pencil";import {    IMessage,    MessageTagEnum,} from '../../../../middlewares/MessageMiddleWare';import {message, setCursor} from '../../../../utils/decorators';import {CursorTypeEnum} from '../../../../cursor/Enum';export declare interface IPencilMessage extends IMessage{    path:string;    stroke:string;}@setCursor(CursorTypeEnum.Default)class Pencil extends AbstractShapePlugin{    protected stroke:string='rgb(0,0,0)';    private lineWidth:number=1;    private brush = new fabric.PencilBrush();    private points:fabric.Point[]=[];    private path:string="";    public instance:FabricPencil;            private addPoint(point:fabric.Point){        const length = this.points.length;        if(length === 0){            this.points.push(point);            this.calcPath();        }else{            const last = this.points[length-1];            if(last.x === point.x && last.y === point.y){                // 不添加            }else{                this.points.push(point);                this.calcPath();            }        }    }    private calcPath(){        const length = this.points.length;        if(length === 0||length===1){            this.path="";        }else {            if(length === 2){                this.path = this.brush.convertPointsToSVGPath(this.points).join("");            }else{                const last = this.points.slice(length-2);                const lastL = this.path.lastIndexOf("L");                const replace = this.path.substring(0,lastL);                const lastString = this.brush.convertPointsToSVGPath(last).join("");                const index = lastString.lastIndexOf("Q");                this.path = replace + lastString.substring(index);            }            this.update();        }    }    @message    private throw(){        return this.instance?{            id:this.instance.id,            tag:MessageTagEnum.Shape,            path:this.path,            type:this.instance.type,            stroke:this.instance.stroke        }:undefined    }    private update(){        this.eBoardCanvas.renderOnAddRemove=false;        if(void 0 !== this.instance){            this.eBoardCanvas.remove(this.instance);        }        const id = this.instance?this.instance.id:undefined;        this.instance=new FabricPencil(this.path,{            stroke: this.getStrokeColor(),            strokeWidth:this.lineWidth,            fill:undefined        });        if(void 0 !== id){            this.instance.setId(id);        }        this.throw();        this.eBoardCanvas.add(this.instance);        this.eBoardCanvas.renderAll();        this.eBoardCanvas.renderOnAddRemove=true;    }        protected onMouseDown(event:IEvent){        super.onMouseDown(event);        this.brush.width=this.lineWidth;        this.addPoint(new fabric.Point(this.start.x,this.start.y));    }    protected onMouseMove(event:IEvent){        if(void 0 === this.start){            return;        }        super.onMouseMove(event);        this.addPoint(new fabric.Point(this.end.x,this.end.y));    }    protected onMouseUp(event:IEvent){        this.addPoint(new fabric.Point(this.end.x,this.end.y));        super.onMouseUp(event);        this.points=[];        this.path="";        this.end=undefined as any;    }            public onMessage(message:IPencilMessage){        const {id,path,stroke} = message;        let instance = this.getInstanceById(id) as FabricPencil;        this.eBoardCanvas.renderOnAddRemove=false;            if(void 0 !== instance){            this.eBoardCanvas.remove(instance);        }        instance = new FabricPencil(path,{            stroke: stroke,            strokeWidth:this.lineWidth,            fill:undefined        }).setId(id);        this.eBoardCanvas.add(instance);        this.eBoardCanvas.requestRenderAll();        this.eBoardCanvas.renderOnAddRemove=true;    }}export {Pencil};