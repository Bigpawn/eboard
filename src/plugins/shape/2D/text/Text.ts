/* * @Author: Bigpawn * @Date: 2018/7/11 13:36 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/11 13:36 */import {AbstractShapePlugin} from '../../AbstractShapePlugin';import {IEvent} from '~fabric/fabric-impl';import {Text as FabricText} from "../../../../extends/Text";import {EBoardEngine} from '../../../../EBoardEngine';import {EBoardCanvas} from '../../../../EBoardCanvas';import {    IMessage,    MessageTagEnum,} from '../../../../middlewares/MessageMiddleWare';import {message} from '../../../../utils/decorators';export declare interface ITextMessage extends IMessage{    text:string;    start:{x:number;y:number}}class Text extends AbstractShapePlugin{    private stroke:string = "#000";    private strokeWidth:number = 1;    protected instance:FabricText;    private fontSize:number = 18;    constructor(canvas:EBoardCanvas,eBoardEngine:EBoardEngine){        super(canvas,eBoardEngine);        this.onMouseMove = undefined as any;        this.onMouseUp = undefined as any;    }        @message    private throw(tag:MessageTagEnum){        return {            type:this.instance.type,            start:this.start,            text:this.instance.text,            tag:tag,            id:this.instance.id        }    }    protected onMouseDown(event:IEvent){        super.onMouseDown(event);        if(void 0 === this.instance){            this.instance = new FabricText('',{                left:this.start.x,                top:this.start.y,                fontSize:this.fontSize,                strokeWidth:this.getCanvasPixel(this.strokeWidth),                stroke:this.stroke,                fontFamily:'Microsoft YaHei'            });            this.instance.on("changed",()=>{                this.throw(MessageTagEnum.Temporary);            });            this.eBoardCanvas.add(this.instance);            this.instance.enterEditing();// 进入编辑模式            this.throw(MessageTagEnum.Start);        }else{            this.throw(MessageTagEnum.End);            // 关闭当前的，如果当前的没有内容则删除            this.instance.exitEditing();// 进入编辑模式            if("" === this.instance.text){                this.eBoardCanvas.remove(this.instance);                this.eBoardCanvas.renderAll();                this.instance=undefined as any;            }            this.instance=undefined as any;        }    }        public onMessage(message:ITextMessage){        const {id,tag,text,start} = message;        let instance = this.getInstanceById(id) as FabricText;        this.eBoardCanvas.renderOnAddRemove=false;        if(void 0 === instance){            instance = new FabricText(text,{                left:start.x,                top:start.y,                fontSize:this.fontSize,                strokeWidth:this.getCanvasPixel(this.strokeWidth),                stroke:this.stroke,                fontFamily:'Microsoft YaHei'            }).setId(id);            this.eBoardCanvas.add(instance);        }        switch (tag){            case MessageTagEnum.Start:                break;            case MessageTagEnum.Temporary:                instance.update({                    text:text,                    left:start.x,                    top:start.y,                });                break;            case MessageTagEnum.End:                if(instance.text === ""){                    this.eBoardCanvas.remove(instance);                }                break;            default:                break;        }        this.eBoardCanvas.requestRenderAll();        this.eBoardCanvas.renderOnAddRemove=true;    }}export {Text};