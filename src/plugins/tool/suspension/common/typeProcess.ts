/* * @Author: Bigpawn * @Date: 2018/7/14 10:58 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/14 10:58 */import {EBoardCanvas} from "../../../../EBoardCanvas";import {fabric} from "fabric";import {DisplayType} from "../enum/displayType";import {OperationType} from "../enum/operationType";class TypeProcess {    /**     *     * @param {EBoardCanvas} eBoardCanvas     * @param {module:.fabric/fabric-impl.Object} fabricObject     * @param {string} operationType     * @param content     */    public init(eBoardCanvas:EBoardCanvas,fabricObject:fabric.Object,operationType:string,content:any) {        const type = this.getType(fabricObject);        const options = this.getOptions(type,operationType,content);        fabricObject.set(options);        eBoardCanvas.requestRenderAll();    }    /**     *     * @param {module:.fabric/fabric-impl.Object} fabricObject     * @returns {string}     */    private getType(fabricObject:fabric.Object) {        return fabricObject.type||'';    }    /**     *     * @param {string} type     * @param {string} operationType     * @param content     */    private getOptions(type:string,operationType:string,content:any) {        let options:Object={};        if(type===DisplayType.Path            ||type===DisplayType.Rect            ||type===DisplayType.Circle            ||type===DisplayType.Ellipse            ||type===DisplayType.ArrowLine            ||type===DisplayType.OrTriangle            ||type===DisplayType.EqTriangle            ||type===DisplayType.Triangle        ) {            if(operationType===OperationType.边框颜色) {                return {                    stroke: content                };            }else if(operationType===OperationType.线型粗细) {                return {                    strokeWidth:content                };            }        }        switch (type) {            case DisplayType.Path:                switch (operationType) {                }                break;            case DisplayType.IText:                switch (operationType) {                    case OperationType.颜色:                        options = {                            fill: content                        };                        break;                    case OperationType.字体大小:                        options = {                            fontSize:content                        };                        break;                    case OperationType.字体类型:                        options = {                            fontFamily:content                        };                        break;                }                break;            case DisplayType.ArrowLine:                switch (operationType) {                }                break;            case DisplayType.Circle:                switch (operationType) {                }                break;            case DisplayType.Ellipse:                break;            case DisplayType.Rect:                break;        }        return options;    }}export {TypeProcess};