/* * @Author: Bigpawn * @Date: 2018/7/13 9:59 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/13 9:59 */import * as React from 'react';import * as ReactDOM from 'react-dom';import {fabric} from "fabric";import {ScreenComponent} from "./components/screenComponent";class SuspensionShell extends React.PureComponent{    private divElement:HTMLElement;    constructor(eBoardCanvasObject:fabric.Object,eBordCanvas:any){        super(eBoardCanvasObject,eBordCanvas);        this.initSuspension(eBoardCanvasObject,eBordCanvas);    }    public initSuspension(fabricObject:fabric.Object,eBordCanvas:any) {        let {left,top} = this._count(fabricObject,eBordCanvas);        this._createElement(eBordCanvas);        ReactDOM.render(<ScreenComponent            left={left}            top={top}            fabricObject={fabricObject}            eBordCanvas={eBordCanvas}        />,this.divElement);    }    private _createElement(eBordCanvas:any) {        if(!this.divElement) {            this.divElement = document.createElement('div');            let container = eBordCanvas.getContainer();            container.appendChild(this.divElement);        }    }    private _count(fabricObject:fabric.Object,eBordCanvas:any) {        const canvasWrapper = eBordCanvas.getContainer();        let canvasWrapperWidth = canvasWrapper.clientWidth;        let canvasWrapperHeight = canvasWrapper.clientHeight;        let objectLeft = fabricObject.left||0;        let objectTop = fabricObject.top||0;        let thisLeft = canvasWrapperWidth*objectLeft/eBordCanvas.getWidth();        let thisTop = canvasWrapperHeight*objectTop/eBordCanvas.getHeight();        return {            left:thisLeft,            top:thisTop - 25        }    }    public removeElement(eBordCanvas:any) {        let container = eBordCanvas.getContainer();        container.removeChild(this.divElement);    }}export {SuspensionShell}