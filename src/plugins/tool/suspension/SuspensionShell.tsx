/* * @Author: Bigpawn * @Date: 2018/7/13 9:59 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/13 9:59 */import * as React from 'react';import * as ReactDOM from 'react-dom';import {fabric} from "fabric";import {ScreenComponent} from "./components/screenComponent";class SuspensionShell extends React.PureComponent{    private divElement:HTMLElement;    constructor(eBoardCanvasObject:fabric.Object,eBordCanvas:any){        super(eBoardCanvasObject,eBordCanvas);        this.initSuspension(eBoardCanvasObject,eBordCanvas);    }    /**     *     * @param {module:.fabric/fabric-impl.Object} fabricObject     * @param eBordCanvas     */    public initSuspension(fabricObject:fabric.Object,eBordCanvas:any) {        let {left,top} = this._count(fabricObject,eBordCanvas);        let typeArray = this._typeArray(fabricObject);        let initStyleArray = this._initStyle(fabricObject);        this._createElement(eBordCanvas);        ReactDOM.render(<ScreenComponent            left={left}            top={top}            fabricObject={fabricObject}            eBordCanvas={eBordCanvas}            typeArray={typeArray}            initStyleArray={initStyleArray}        />,this.divElement);    }    /**     * 创建浮层外层元素     * @param eBordCanvas     * @private     */    private _createElement(eBordCanvas:any) {        if(!this.divElement) {            this.divElement = document.createElement('div');            let container = eBordCanvas.getContainer();            container.appendChild(this.divElement);        }    }    /**     * 位置     * @param {module:.fabric/fabric-impl.Object} fabricObject     * @param eBordCanvas     * @returns {{left: number; top: number}}     * @private     */    private _count(fabricObject:fabric.Object,eBordCanvas:any) {        const canvasWrapper = eBordCanvas.getContainer();        let canvasWrapperWidth = canvasWrapper.clientWidth;        let canvasWrapperHeight = canvasWrapper.clientHeight;        let objectLeft = fabricObject.left||0;        let objectTop = fabricObject.top||0;        let thisLeft = canvasWrapperWidth*objectLeft/eBordCanvas.getWidth();        let thisTop = canvasWrapperHeight*objectTop/eBordCanvas.getHeight();        return {            left:thisLeft,            top:thisTop - 59        }    }    /**     * 被选中元素的type集合     * @param fabricObject     * @returns {any}     * @private     */    private _typeArray(fabricObject:any) {        let array:any = [];        const objects = fabricObject && fabricObject._objects;        if(objects&&objects.length>0) {            objects.map((item:any,index:number)=>{                array.push(item.type);            });        }else {            fabricObject&&array.push(fabricObject.type);        }        return array;    }    /**     * 默认样式     * @param fabricObject     * @returns {any}     * @private     */    private _initStyle(fabricObject:any) {        const objects = fabricObject && fabricObject._objects;        let initStyleArray:any;        if(!objects) {            initStyleArray = {                ...fabricObject            }        }        return initStyleArray;    }    /**     * 移除外层元素     * @param eBordCanvas     */    public removeElement(eBordCanvas:any) {        let container = eBordCanvas.getContainer();        container.removeChild(this.divElement);    }}export {SuspensionShell}