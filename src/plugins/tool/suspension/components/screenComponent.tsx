/* * @Author: Bigpawn * @Date: 2018/7/13 10:55 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/13 10:55 */import * as React from 'react';import '../../../../style/screencomponent.less';import {EBoardCanvas} from "../../../../EBoardCanvas";import {TypeProcess} from "../common/typeProcess";import {OperationType} from "../enum/operationType";import {ColorPicker} from "./colorPicker";import {SelectSuspension} from "./selectSuspension";import {fabric} from "fabric";declare interface ScreenProps {    left?:number;    top?:number;    fabricObject?:any;    eBordCanvas?:EBoardCanvas;}declare interface ScreenComponentState {}class ScreenComponent extends React.PureComponent<ScreenProps,ScreenComponentState>{    constructor(props:ScreenProps){        super(props);    }    /**     * click     * @param {OperationType} type     * @param content     */    public handleClick(type:OperationType,content?:any) {        const typeProcess = new TypeProcess();        const objects = this.props.fabricObject && this.props.fabricObject._objects;        if(objects&&objects.length>0) {            objects.map((item:any,index:number)=>{                this.props.eBordCanvas && typeProcess.init(this.props.eBordCanvas,item,type,content);            });        }else {            this.props.fabricObject&&this.props.eBordCanvas&&typeProcess.init(this.props.eBordCanvas,this.props.fabricObject,type,content);        }    }    render() {        const {left,top} = this.props;        return(            <div                className="eboard-screen-component-wapper"                style={{                    left:`${left}px`,                    top:`${top}px`                }}            >                <ColorPicker                    type={OperationType.颜色}                    className="eboard-screen-button-layout"                    onChange={(value:string)=>{                        let color = new fabric.Color(value).toRgba();                        this.handleClick(OperationType.颜色,color)                    }}                />                <ColorPicker                    className="eboard-screen-button-layout"                    type={OperationType.边框颜色}                    onChange={(value:string)=>{                        let color = new fabric.Color(value).toRgba();                        this.handleClick(OperationType.边框颜色,color);                    }}                />                <ColorPicker                    className="eboard-screen-button-layout"                    type={OperationType.填充色}                    onChange={(value:string)=>{                        let color = new fabric.Color(value).toRgba();                        this.handleClick(OperationType.填充色,color);                    }}                />                <SelectSuspension                    type="fontSize"                    className="eboard-screen-button-layout"                    onChange={(value:number)=>{                        this.handleClick(OperationType.字体大小,value)                    }}                />                <SelectSuspension                    type="fontFamily"                    className="eboard-screen-button-layout"                    onChange={(value:string)=>{                        this.handleClick(OperationType.字体类型,value)                    }}                />                <SelectSuspension                    type="lineWidth"                    className="eboard-screen-button-layout"                    onChange={(value:number)=>{                        this.handleClick(OperationType.线型粗细,value);                    }}                />                <SelectSuspension                    type="lineStyle"                    className="eboard-screen-button-layout"                    onChange={(value:string)=>{                    }}                />            </div>        )    }}export {ScreenComponent}