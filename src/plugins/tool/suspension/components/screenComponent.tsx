/* * @Author: Bigpawn * @Date: 2018/7/13 10:55 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/13 10:55 */import * as React from 'react';import '../../../../style/screencomponent.less';import {EBoardCanvas} from "../../../../EBoardCanvas";import {TypeProcess} from "../common/typeProcess";import {OperationType} from "../enum/operationType";import {ColorPicker} from "./colorPicker";import {SelectSuspension} from "./selectSuspension";import {fabric} from "fabric";import {DisplayType} from "../enum/displayType";declare interface ScreenProps {    left?:number;    top?:number;    fabricObject?:any;    eBordCanvas?:EBoardCanvas;    typeArray?:any;    initStyleArray?:any;}declare interface ScreenComponentState {    isBlod:boolean;    isItalic:boolean;}class ScreenComponent extends React.PureComponent<ScreenProps,ScreenComponentState>{    constructor(props:ScreenProps){        super(props);        this.state = {            isBlod:false,            isItalic:false        }    }    /**     * click     * @param {OperationType} type     * @param content     */    public handleClick(type:OperationType,content?:any) {        const typeProcess = new TypeProcess();        const objects = this.props.fabricObject && this.props.fabricObject._objects;        if(objects&&objects.length>0) {            objects.map((item:any,index:number)=>{                this.props.eBordCanvas && typeProcess.init(this.props.eBordCanvas,item,type,content);            });        }else {            this.props.fabricObject&&this.props.eBordCanvas&&typeProcess.init(this.props.eBordCanvas,this.props.fabricObject,type,content);        }    }    render() {        const {left,top,typeArray,initStyleArray} = this.props;        return(            <div                className="eboard-screen-component-wapper"                style={{                    left:`${left}px`,                    top:`${top}px`                }}            >                {                    typeArray.indexOf(DisplayType.IText)>=0?[                        <ColorPicker                            key="textColor"                            type={OperationType.颜色}                            className="eboard-screen-button-layout"                            defaultValue={initStyleArray&&initStyleArray.fill?initStyleArray.fill:''}                            onChange={(value:string)=>{                                let color = new fabric.Color(value).toRgba();                                this.handleClick(OperationType.颜色,color)                            }}                        />,                        <div                            className={`eboard-screen-button-layout ${this.state.isBlod?'eboard-icon-active':''}`}                            key="textBold"                        >                            <i                                className="eboard-icon eboard-icon-bold eboard-screen-button-color-icon"                                title="加粗"                                onClick={()=>{                                    this.handleClick(OperationType.字体加粗,!this.state.isBlod?1000:null);                                    this.setState({                                        isBlod:!this.state.isBlod                                    })                                }}                            />                        </div>,                        <div                            className={`eboard-screen-button-layout ${this.state.isItalic?'eboard-icon-active':''}`}                            key="textOblique"                        >                            <i                                className="eboard-icon eboard-icon-xieti eboard-screen-button-color-icon"                                title="倾斜"                                onClick={()=>{                                    this.handleClick(OperationType.字体倾斜,!this.state.isItalic?'oblique':'normal');                                    this.setState({                                        isItalic:!this.state.isItalic                                    })                                }}                            />                        </div>,                        <SelectSuspension                            type="fontSize"                            className="eboard-screen-button-layout"                            key="fontsize"                            defaultValue={initStyleArray&&initStyleArray.fontSize?initStyleArray.fontSize:12}                            onChange={(value:number)=>{                                this.handleClick(OperationType.字体大小,value)                            }}                        />,                        <SelectSuspension                            type="fontFamily"                            className="eboard-screen-button-layout"                            key="fontfamily"                            defaultValue={initStyleArray&&initStyleArray.fontFamily?initStyleArray.fontFamily:'Microsoft YaHei'}                            onChange={(value:string)=>{                                this.handleClick(OperationType.字体类型,value)                            }}                        />                    ]:null                }                {                    typeArray.indexOf(DisplayType.Star)>=0                    ||typeArray.indexOf(DisplayType.Polyline)>=0                    ||typeArray.indexOf(DisplayType.Pentagon)>=0                    ||typeArray.indexOf(DisplayType.Hexagon)>=0                    ||typeArray.indexOf(DisplayType.Triangle)>=0                    ||typeArray.indexOf(DisplayType.EqTriangle)>=0                    ||typeArray.indexOf(DisplayType.OrTriangle)>=0                    ||typeArray.indexOf(DisplayType.Ellipse)>=0                    ||typeArray.indexOf(DisplayType.Circle)>=0                    ||typeArray.indexOf(DisplayType.Rect)>=0                    ||typeArray.indexOf(DisplayType.Path)>=0                    ||typeArray.indexOf(DisplayType.Arrow)>=0                    ||typeArray.indexOf(DisplayType.Line)?[                        <ColorPicker                            className="eboard-screen-button-layout"                            type={OperationType.边框颜色}                            key="bordercolor"                            defaultValue={initStyleArray&&initStyleArray.stroke?initStyleArray.stroke:''}                            onChange={(value:string)=>{                                let color = new fabric.Color(value).toRgba();                                this.handleClick(OperationType.边框颜色,color);                            }}                        />,                        <ColorPicker                            className="eboard-screen-button-layout"                            type={OperationType.填充色}                            key="fill"                            defaultValue={initStyleArray&&initStyleArray.fill?initStyleArray.fill:''}                            onChange={(value:string)=>{                                let color = new fabric.Color(value).toRgba();                                this.handleClick(OperationType.填充色,color);                            }}                        />,                        <SelectSuspension                            type="lineWidth"                            className="eboard-screen-button-layout"                            key="borderType"                            defaultValue={initStyleArray&&initStyleArray.strokeWidth?initStyleArray.strokeWidth:1}                            onChange={(value:number)=>{                                this.handleClick(OperationType.线型粗细,value);                            }}                        />,                        <SelectSuspension                            type="lineStyle"                            className="eboard-screen-button-layout"                            key="borderstyle"                            defaultValue={initStyleArray&&initStyleArray.strokeDashArray?initStyleArray.strokeDashArray:[0,0]}                            onChange={(value:any)=>{                                this.handleClick(OperationType.样式线型,value)                            }}                        />                    ]:null                }            </div>        )    }}export {ScreenComponent}