/* * @Author: Bigpawn * @Date: 2018/7/16 14:43 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/16 14:43 */import * as React from 'react';import {fontFamily,fontSize,lineWidth,lineStyle} from "../enum/operationType";import Select from 'react-select';import 'react-select/dist/react-select.css';declare interface FontStyleProps {    onChange?:Function;    type?:string;    className?:string;    defaultValue?:any;}declare interface FontStyleState {    selectedOption:any;}class SelectSuspension extends React.PureComponent<FontStyleProps,FontStyleState>{    constructor(props:any) {        super(props);        this.state = {            selectedOption:''        }    }    componentWillMount() {        this.setState({            selectedOption:this.props.defaultValue        })    }    handleChange=(selectedOption:any)=>{        const {onChange} = this.props;        let {value} = selectedOption;        this.setState({selectedOption});        onChange&&onChange(value);    };    handleRenderer=(selectOptions:any,index:any)=>{        const {type} = this.props;        if(type==='fontSize'||type==="fontFamily") {            return (                <span>{selectOptions.label}</span>            )        }else if(type==="lineWidth"){            let {value} = selectOptions;            return (                <span className="eboard-screen-select-options" style={{height:`${value}px`}} />            )        }else {            let {label} = selectOptions;            return (                <span className="eboard-screen-select-style" style={{borderTop:`4px ${label} #000000`}} />            )        }    };    valueRenderer=(valueOption:any)=>{        const {type} = this.props;        if(type==='fontSize'||type==="fontFamily") {            return valueOption.label        }else if(type==="lineWidth"){            let {value} = valueOption;            return (                <span className="eboard-screen-select-options" style={{height:`${value}px`}} />            )        }else {            let {label} = valueOption;            return (                <span className="eboard-screen-select-style" style={{borderTop:`4px ${label} #000000`}} />            )        }    };    render() {        const {type,className} = this.props;        return (            <div className={className}>                <Select                    name="form-field-name"                    className={`eboard-screen-select-wrapper ${type==="fontSize"?'eboard-screen-select-wrapper-fontSize':''}`}                    clearable={false}                    value={this.state.selectedOption}                    onChange={this.handleChange}                    options={type==='fontSize'?fontSize:type==="fontFamily"?fontFamily:type==="lineWidth"?lineWidth:lineStyle}                    optionRenderer={this.handleRenderer}                    valueRenderer={this.valueRenderer}                />            </div>        )    }}export {SelectSuspension}