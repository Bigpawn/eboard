/* * @Author: Bigpawn * @Date: 2018/7/16 14:43 * @Last Modified by: Bigpawn * @Last Modified time: 2018/7/16 14:43 */import * as React from 'react';import {fontFamily,fontSize,lineWidth} from "../enum/operationType";import Select from 'react-select';import 'react-select/dist/react-select.css';declare interface FontStyleProps {    onChange?:Function;    type?:string;    className?:string;}declare interface FontStyleState {    selectedOption:any;}class SelectSuspension extends React.PureComponent<FontStyleProps,FontStyleState>{    constructor(props:any) {        super(props);        this.state = {            selectedOption:''        }    }    handleChange=(selectedOption:any)=>{        const {onChange} = this.props;        let {value} = selectedOption;        this.setState({selectedOption});        onChange&&onChange(value);    };    handleComponent=(selectOptions:any,index:any)=>{        const {type} = this.props;        if(type==='fontSize'||type==="fontFamily") {            return (                <span>{selectOptions.value}</span>            )        }else {            let {value} = selectOptions;            return (                <span className="eboard-screen-select-options" style={{height:`${value}px`}} />            )        }    };    render() {        const {type,className} = this.props;        return (            <div className={className}>                <Select                    name="form-field-name"                    className="eboard-screen-select-wrapper"                    value={this.state.selectedOption}                    onChange={this.handleChange}                    options={type==='fontSize'?fontSize:type==="fontFamily"?fontFamily:lineWidth}                    optionRenderer={this.handleComponent}                />                {/*<select*/}                    {/*onChange={(e:any)=>{*/}                        {/*let value = type==="fontSize"?parseInt(e.target.value):e.target.value;*/}                        {/*onChange&&onChange(value);*/}                    {/*}}*/}                {/*>*/}                    {/*{*/}                        {/*type==="fontSize"?fontSize.map((item:any,index:number)=>{*/}                            {/*return (*/}                                {/*<option value={item.value} key={index}>{item.label}</option>*/}                            {/*)*/}                        {/*}):type==="fontFamily"?fontFamily.map((item:any,index:number)=>{*/}                            {/*return (*/}                                {/*<option value={item.value} key={index}>{item.label}</option>*/}                            {/*)*/}                        {/*}):type==="lineWidth"?lineWidth.map((item:any,index:number)=>{*/}                            {/*return (*/}                                {/*<option value={item.value} key={index}>*/}                                    {/*<span className={`eboard-screen-select-options-width`} />*/}                                {/*</option>*/}                            {/*)*/}                        {/*}):null*/}                    {/*}*/}                {/*</select>*/}            </div>        )    }}export {SelectSuspension}